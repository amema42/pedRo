/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   control.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/23 11:14:19 by amema             #+#    #+#             */
/*   Updated: 2024/03/05 16:35:08 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	philosopher_check(t_philo *philo)
{
	pthread_mutex_lock(philo->common_lock);
	if (!*(philo->stop))
		return (pthread_mutex_unlock(philo->common_lock), 1);
	else
		return (pthread_mutex_unlock(philo->common_lock), 0);
}

int	check_buoni_pasto(t_data *data)
{
	pthread_mutex_lock(data->common_lock);
	if (*data->philos_full == data->philo_count)
	{
		printf("every philosopher ate %d times\n", data->meals_count);
		*data->stop = 1;
		return (pthread_mutex_unlock(data->common_lock), 1);
	}
	return (pthread_mutex_unlock(data->common_lock), 0);
}

int	death_status(t_philo *philo, t_data *data, long int start)
{
	int	i;

	i = -1;
	while (++i < data->philo_count)
	{
		pthread_mutex_lock(&data->personal_lock[i]);
		if (get_elapsed_time_ms(start) - philo[i].last_eat > data->time_to_die)
		{
			pthread_mutex_unlock(&data->personal_lock[i]);
			pthread_mutex_lock(data->common_lock);
			*data->stop = 1;
			printf("%d\t%d\tdied\n", get_elapsed_time_ms(start), philo[i].id);
			pthread_mutex_unlock(data->common_lock);
			return (1);
		}
		pthread_mutex_unlock(&data->personal_lock[i]);
	}
	return (0);
}

void	check_philos(t_philo *philo, t_data *data)
{
	long int	start;

	start = *philo->start;
	while (1)
	{
		if (death_status(philo, data, start) == 1)
			return ;
		if (data->meals_count && check_buoni_pasto(data) == 1)
			return ;
	}
}

void	meal_ctrl(t_data *data, t_philo *philo, pthread_t *threads)
{
	int	i;

	i = -1;
	while (++i < data->philo_count)
	{
		if (pthread_join(threads[i], NULL) != 0)
			philo_putstr_fd("thread creation: failed", 2);
	}
	i = -1;
	while (++i < data->philo_count)
	{
		pthread_mutex_destroy(&data->forks[i]);
		pthread_mutex_destroy(&data->personal_lock[i]);
	}
	pthread_mutex_destroy(data->common_lock);
	free_all(data);
	free(threads);
	free(philo);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/04 16:23:45 by amema             #+#    #+#             */
/*   Updated: 2024/03/04 22:23:20 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

t_philo	*create_philo(t_data *data)
{
	t_philo	*philo;
	int		i;

	philo = philo_calloc(data->philo_count, sizeof(t_philo));
	if (!philo)
		return (NULL);
	i = -1;
	while (++i < data->philo_count)
	{
		philo[i].time_to_die = data->time_to_die;
		philo[i].time_to_eat = data->time_to_eat;
		philo[i].time_to_sleep = data->time_to_sleep;
		philo[i].meals_count = data->meals_count;
		philo[i].id = i + 1;
		philo[i].left_fork = &data->forks[i];
		philo[i].right_fork = &data->forks[(i + 1) % data->philo_count];
		if (data->philo_count == 1)
			philo[i].right_fork = NULL;
		philo[i].personal_lock = &data->personal_lock[i];
		philo[i].common_lock = data->common_lock;
		philo[i].start = data->start;
		philo[i].stop = data->stop;
		philo[i].philos_full = data->philos_full;
	}
	return (philo);
}

int	allocate_data(t_data *data)
{
	data->forks = philo_calloc(data->philo_count, sizeof(pthread_mutex_t));
	if (!data->forks)
		return (0);
	data->personal_lock = philo_calloc(data->philo_count,
			sizeof(pthread_mutex_t));
	if (!data->personal_lock)
		return (0);
	data->common_lock = philo_calloc(1, sizeof(pthread_mutex_t));
	if (!data->common_lock)
		return (0);
	data->start = philo_calloc(1, sizeof(long int));
	if (!data->start)
		return (0);
	data->stop = philo_calloc(1, sizeof(int));
	if (!data->stop)
		return (0);
	data->philos_full = philo_calloc(1, sizeof(int));
	if (!data->philos_full)
		return (0);
	return (1);
}

t_data	*create_data(char **argv)
{
	t_data	*data;
	int		i;

	i = -1;
	data = philo_calloc(1, sizeof(t_data));
	if (!data)
		return (NULL);
	data->philo_count = another_atoi(argv[1]);
	data->time_to_die = another_atoi(argv[2]);
	data->time_to_eat = another_atoi(argv[3]);
	data->time_to_sleep = another_atoi(argv[4]);
	if (argv[5])
		data->meals_count = another_atoi(argv[5]);
	if (!allocate_data(data))
		return (free_all(data), NULL);
	while (++i < data->philo_count)
	{
		pthread_mutex_init(&data->forks[i], NULL);
		pthread_mutex_init(&data->personal_lock[i], NULL);
	}
	pthread_mutex_init(data->common_lock, NULL);
	return (data);
}

pthread_t	*create_threads(t_philo *philo, t_data *data)
{
	pthread_t	*threads;
	int			i;

	threads = philo_calloc(data->philo_count, sizeof(pthread_t));
	if (!threads)
		return (NULL);
	i = -1;
	*data->start = get_current_time_ms();
	while (++i < data->philo_count)
	{
		if (pthread_create(&threads[i], NULL, &philo_routine, &philo[i]) != 0)
		{
			free(threads);
			return (philo_putstr_fd("thread creation: failed", 2), NULL);
		}
	}
	return (threads);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   input.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/04 16:23:59 by amema             #+#    #+#             */
/*   Updated: 2024/03/04 18:36:07 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	arg_valid(int argc, char **argv)
{
	int	i;

	if (argc != 5 && argc != 6)
		return (philo_putstr_fd("error: wrong nbr. of args", 2), -1);
	i = 1;
	while (i < argc)
	{
		if (!positive_int(argv[i]))
			return (philo_putstr_fd("error: need positive int args", 2), -1);
		i++;
	}
	return (0);
}

int	positive_int(char *c)
{
	long int	n;

	n = 0;
	while (*c)
	{
		if (*c < '0' || *c > '9')
			return (0);
		n *= 10;
		n += (*c - '0');
		if (n > 2147483647)
			return (0);
		c++;
	}
	if (n > 0)
		return (1);
	else
		return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/23 13:14:12 by amema             #+#    #+#             */
/*   Updated: 2024/03/04 18:11:42 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	main(int argc, char **argv)
{
	pthread_t	*threads;
	t_philo		*philo;
	t_data		*data;

	if (arg_valid(argc, argv) == -1)
		return (EXIT_FAILURE);
	data = create_data(argv);
	if (!data)
		return (EXIT_FAILURE);
	philo = create_philo(data);
	if (!philo)
		return (free_all(data), EXIT_FAILURE);
	threads = create_threads(philo, data);
	if (!threads)
		return (free(philo), free_all(data), EXIT_FAILURE);
	check_philos(philo, data);
	meal_ctrl(data, philo, threads);
	return (EXIT_SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/23 13:14:22 by amema             #+#    #+#             */
/*   Updated: 2024/03/05 14:13:07 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"
//prendere una posata, se questa e null il philo muore e torna 0
//se il philo e' vivo prende la posata e torna 1, else non e piu vivo
int	lock_fork(t_philo *philo, pthread_mutex_t *fork, long int start)
{
	if (!fork)
		return (msleep(philo->time_to_die + 100), 0);
	// if (philosopher_check(philo))
	// {
	// 	pthread_mutex_lock(fork);
	// 	locked_print("has taken a fork", start, philo);
	// 	return (1);
	// }
	// else
	// 	return (0);

	pthread_mutex_lock(fork);
	locked_print("has taken a fork", start, philo);
	return (1);
}
//if fork sx e else if fork dx --> mangia
//acquisizione del mutex_personale, blocca una risorsa contemporaneamente
//di base, nella seconda funzione else if se non puo' acquisire anche la fork
//sx, esce dalla funz.

void	eating_process(t_philo *philo, long int start)
{
	if (!lock_fork(philo, philo->left_fork, start))
		return ;
	else if (!lock_fork(philo, philo->right_fork, start))
	{
		pthread_mutex_unlock(philo->left_fork);
		return ;
	}
	if (philosopher_check(philo))
	{
		pthread_mutex_lock(philo->personal_lock);
		philo->last_eat = get_elapsed_time_ms(start);
		locked_print("is eating", start, philo);
		pthread_mutex_unlock(philo->personal_lock);
		if (philo->meals_count && ++philo->n_of_meals == philo->meals_count)
		{
			pthread_mutex_lock(philo->common_lock);
			*philo->philos_full += 1;
			pthread_mutex_unlock(philo->common_lock);
		}
		msleep(philo->time_to_eat);
	}
	pthread_mutex_unlock(philo->right_fork);
	pthread_mutex_unlock(philo->left_fork);
}

void	relax(t_philo *philo, long int start)
{
	locked_print("is sleeping", start, philo);
	msleep(philo->time_to_sleep);
	locked_print("is thinking", *philo->start, philo);
}

void	*philo_routine(void *arg)
{
	t_philo			*philo;

	philo = arg;
	if (philo->id % 2 == 0)
		locked_print("is thinking", *philo->start, philo);
	if (philo->id % 2 == 0)
		msleep(100);
	while (philosopher_check(philo))
	{
		if (philosopher_check(philo))
			eating_process(philo, *philo->start);
		if (philosopher_check(philo))
			relax(philo, *philo->start);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   time.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/23 11:14:22 by amema             #+#    #+#             */
/*   Updated: 2024/03/05 16:39:47 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

//in timeval sono ottenuti sec e millisec, converto e return tempo tot
long int	get_current_time_ms(void)
{
	struct timeval	current;

	if (gettimeofday(&current, NULL) != 0)
	{
		return (-1);
	}
	return (current.tv_sec * 1000 + current.tv_usec / 1000);
}

int	get_elapsed_time_ms(int start)
{
	return ((int)(get_current_time_ms() - start));
}

//checkin using timeToSleep

void	msleep(int ms)
{
	long int	sleep_start;

	sleep_start = get_current_time_ms();
	while (get_elapsed_time_ms(sleep_start) < ms)
		usleep(100);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amema <amema@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/23 11:14:56 by amema             #+#    #+#             */
/*   Updated: 2024/03/04 18:12:35 by amema            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

void	locked_print(char *action, long int start, t_philo *philo)
{
	pthread_mutex_lock(philo->common_lock);
	if (!*philo->stop)
		printf("%d\t%d\t%s\n", get_elapsed_time_ms(start), philo->id, action);
	pthread_mutex_unlock(philo->common_lock);
}

int	another_atoi(char *c)
{
	long int	n;

	n = 0;
	while (*c)
	{
		if (*c < '0' || *c > '9')
			return (0);
		n *= 10;
		n += (*c - '0');
		if (n > 2147483647)
			return (0);
		c++;
	}
	return (n);
}

void	philo_putstr_fd(char *str, int fd)
{
	while (str && *str)
		write(fd, str++, 1);
}

// void	*p_calloc(int count, int size)
// {
// 	int		i;
// 	char	*ptr;

// 	i = 0;
// 	ptr = malloc(count * size);
// 	if (!ptr)
// 		return (philo_putstr_fd(ALLOC_ERROR, 2), NULL);
// 	while (i < count * size)
// 		ptr[i++] = 0;
// 	return ((void *)ptr);
// }

void	*philo_calloc(int i, int size)
{
	void	*ptr;

	if (i <= 0 || size <= 0 || i > (INT_MAX / size))
		return (NULL);
	ptr = malloc(i * size);
	if (!ptr)
	{
		philo_putstr_fd("allocation failed", 2);
		return (NULL);
	}
	memset(ptr, 0, i * size);
	return (ptr);
}

void	free_all(t_data *data)
{
	if (data && data->forks)
		free(data->forks);
	if (data && data->personal_lock)
		free(data->personal_lock);
	if (data && data->common_lock)
		free(data->common_lock);
	if (data && data->start)
		free(data->start);
	if (data && data->stop)
		free(data->stop);
	if (data && data->philos_full)
		free(data->philos_full);
	if (data)
		free(data);
}
